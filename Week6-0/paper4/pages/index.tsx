import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import ABI from "../contract/contract.json";
import { useContractRead, useContractWrite, usePrepareContractWrite } from 'wagmi'
import { useEffect, useState } from "react";

const Home: NextPage = () => {
  //const { ensData } = useEnsData(undefined);
  const [store, setStore] = useState(false);
  const [save, setSave] = useState(false);
  const [name, setName] = useState('');


  // switch
  const { data: SwitchData, isError: isSwitchError, isLoading: isSwitchLoading } = useContractRead({
    address: '0x8809e8D5e43C43C2A1C8566d6d964d9bF5D13F0D',
    abi: ABI,
    functionName: 'retrieve',
    onSuccess(data) {
      setStore(data as boolean)
    }
  })
  const { config: contractSwitchWriteConfig } = usePrepareContractWrite({
    address: '0x8809e8D5e43C43C2A1C8566d6d964d9bF5D13F0D',
    abi: [
      {
        name: 'store',
        type: 'function',
        stateMutability: 'nonpayable',
        inputs: [{ internalType: 'bool', name: '_v', type: 'bool' }],
        outputs: [],
      },
    ],
    functionName: 'store',
    args: [store],
  });

  const {
    write: storeWrite,
    isLoading: isStoreLoading,
    isSuccess: isStoreStarted,
    error: StoreError,
  } = useContractWrite(contractSwitchWriteConfig);

  useEffect(() => {
    if (save) {
      storeWrite?.()
      setSave(false)
    }
  }, [store]);

  // name
  const { data: NameData, isError: isNameError, isLoading: isNameLoading } = useContractRead({
    address: '0x8809e8D5e43C43C2A1C8566d6d964d9bF5D13F0D',
    abi: ABI,
    functionName: 'getName',
    onSuccess(data) {
      console.log(data)
      setName(data as string)
    }
  })
  const { config: contractNameWriteConfig } = usePrepareContractWrite({
    address: '0x8809e8D5e43C43C2A1C8566d6d964d9bF5D13F0D',
    abi: [
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_name",
            "type": "string"
          }
        ],
        "name": "setName",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    functionName: 'setName',
    args: [name],
  });

  const {
    write: nameWrite
  } = useContractWrite(contractNameWriteConfig);

  function handleSetName() {
    nameWrite?.()
  }


  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          name="description"
          content="Generated by @rainbow-me/create-rainbowkit"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        <div>
          <input type="radio" id="huey" name="drone" value="true"
            checked={store === true}
            onChange={(e) => {
              setStore(true)
              setSave(true)
            }}
          />
          <label>true</label>
        </div>

        <div>
          <input type="radio" id="dewey" name="drone" value="false"
            checked={store === false}
            onChange={(e) => {
              setStore(false)
              setSave(true)
            }}
          />
          <label>false</label>
        </div>

        <div>
          <input type="text" id="name" name="name" value={name} onChange={(e) => setName(e.target.value)} />
          <label>name: </label>
          <button onClick={handleSetName}>submit</button>
        </div>
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" target="_blank" rel="noopener noreferrer">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer>
    </div>
  );
};

export default Home;
